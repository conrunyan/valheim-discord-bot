"""
MIT License

Copyright (c) 2021 Connor Runyan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
import re

from typing import Dict, List

class PlayerAction():
    LOG_IN = "LOG_IN"
    LOG_OUT = "LOG_OUT"


def get_active_players(log_path: str) -> List[str]:
    pass


def get_player_events(log_contents: str, action_type: PlayerAction) -> Dict[str, Dict[str, str]]:
    """Parses a log generated by the Valheim server and supplies login events.

    Args:
        log_contents (str): Containing all the contents of the Valheim server syslog.
        action_type (PlayerAction): Type of event to look for in the log (i.e. Login or Logout).

    Returns:
        Dict[str, str]: Key value pairs of format {"zoid": {"username": "", "timestamp": ""}}.
    """
    re_login_zoid = None
    if action_type == PlayerAction.LOG_IN:
        re_login_zoid = re.compile(r'(?P<timestamp>\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}).*Got character ZDOID from (?P<username>\w+) : (?P<connect_id>\d+):1')
    elif action_type == PlayerAction.LOG_OUT:
        re_login_zoid = re.compile(r'(?P<timestamp>\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}).*Got character ZDOID from (?P<username>\w+) : (?P<connect_id>\d+):1')
    else:
        raise ValueError(f"Unsupported player action '{action_type}'. Did you forget to implement a match matter for this?")

    events_found = [l.groupdict() for l in re_login_zoid.finditer(log_contents)]
    if events_found:
        return {event.get("connect_id"):_create_player_activity_info(event, PlayerAction.LOG_IN) for event in events_found}
    return dict()

def _create_player_activity_info(found_results: Dict[str, str], action: PlayerAction) -> Dict[str, str]:
    return {
        "username": found_results.get("username"),
        "timestamp": found_results.get("timestamp"),
        "action": action
    }


def get_logout_events(log_contents: str) -> Dict[str, str]:
    pass